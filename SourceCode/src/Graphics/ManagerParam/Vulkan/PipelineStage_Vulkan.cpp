#include "PipelineStage_Vulkan.h"

_____________SD_START_GRAPHICS_NAMESPACE_____________

VkPipelineStageFlagBits PipelineStage_Vulkan::PipelineStages[PipelineStage_MAX_DEFINE_VALUE] =
{
    VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT,
    VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT,
    VK_PIPELINE_STAGE_VERTEX_INPUT_BIT,
    VK_PIPELINE_STAGE_VERTEX_SHADER_BIT,
    VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT,
    VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT,
    VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT,
    VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT,
    VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT,
    VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT,
    VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT,
    VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT,
    VK_PIPELINE_STAGE_TRANSFER_BIT,
    VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT,
    VK_PIPELINE_STAGE_HOST_BIT,
    VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT,
    VK_PIPELINE_STAGE_ALL_COMMANDS_BIT
};

VkPipelineStageFlags PipelineStage_Vulkan::Convert(const std::vector<PipelineStageEnum> &i_src)
{
    VkPipelineStageFlags result = 0;
    for (PipelineStageEnum stage : i_src) {
        if (SD_ENUM_TO_INT(stage) < PipelineStage_MAX_DEFINE_VALUE) {
            result |= PipelineStages[SD_ENUM_TO_INT(stage)];
        }
    }
    return result;
}

______________SD_END_GRAPHICS_NAMESPACE______________