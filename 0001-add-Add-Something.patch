From 0bd801138b7f3ed1198de83cb1a08a56e37a02a9 Mon Sep 17 00:00:00 2001
From: "La-La,Chen" <sam24666806@gmail.com>
Date: Sun, 6 Dec 2020 15:53:02 +0800
Subject: [PATCH] [add] Add Something

---
 .../Shader/AxesShader.frag                         |  20 ++--
 .../Shader/AxesShader.frag.spv                     | Bin 1936 -> 2068 bytes
 .../Shader/AxesShader.vert                         |  22 ++--
 .../Shader/AxesShader.vert.spv                     | Bin 3064 -> 3180 bytes
 .../Shader/PhongShader.frag                        |  17 +--
 .../Shader/PhongShader.frag.spv                    | Bin 8868 -> 9000 bytes
 .../Shader/PhongShader.vert                        |  21 ++--
 .../Shader/PhongShader.vert.spv                    | Bin 5220 -> 5352 bytes
 PropSheet/SDEngine.props                           |   2 +-
 .../include/Graphics/Material/BasicParameter.h     |  48 +++++---
 .../src/Graphics/Material/BasicParameter.cpp       |  13 ++-
 .../Code/SampleDrawObjects.cpp                     | 127 +++++++++++++++------
 .../Code/SampleDrawObjects.h                       |  12 +-
 13 files changed, 181 insertions(+), 101 deletions(-)

diff --git a/Bin/UnitTest/Assets/UnitTest_FeatureDeveloping/Shader/AxesShader.frag b/Bin/UnitTest/Assets/UnitTest_FeatureDeveloping/Shader/AxesShader.frag
index 504c3d4..dc3137c 100644
--- a/Bin/UnitTest/Assets/UnitTest_FeatureDeveloping/Shader/AxesShader.frag
+++ b/Bin/UnitTest/Assets/UnitTest_FeatureDeveloping/Shader/AxesShader.frag
@@ -12,16 +12,19 @@ layout(location = 0) out vec4 fragColor;
 //Uniform
 //layout(set = n, binding = m) for Opengl, we don't assign set. (default set is 0)
 //Uniform basic Buffer.
-layout(set = 0, binding = 0) uniform BasicUniforms {
+layout(set = 0, binding = 0) uniform CameraUniforms {
     mat4 proj;
 	mat4 view;
+	vec4 viewEye;
+} camera;
+
+layout(set = 1, binding = 0) uniform GeometryUniforms {
 	mat4 world;
 	mat4 normal;
-	vec4 viewEye;
-} basic;
+} geometry;
 
 //Uniform Light Buffer.
-layout(set = 1, binding = 0) uniform LightUniforms {
+layout(set = 2, binding = 0) uniform LightUniforms {
 	vec4 ambient;
 	vec4 diffuse;
 	vec4 specular;
@@ -35,15 +38,6 @@ layout(set = 1, binding = 0) uniform LightUniforms {
 	uint kind; //0: directional, 1: spot, 2: point
 } light;
 
-//Uniform Material buffer
-layout(set = 2, binding = 0) uniform MaterialUniforms {
-	vec4 ambient;
-	vec4 diffuse;
-	vec4 specular;
-	vec4 emission;
-	float shininess;
-} material;
-
 void main()
 {
 	fragColor = fColor;
diff --git a/Bin/UnitTest/Assets/UnitTest_FeatureDeveloping/Shader/AxesShader.frag.spv b/Bin/UnitTest/Assets/UnitTest_FeatureDeveloping/Shader/AxesShader.frag.spv
index 3d59bded7acde33993eb059e1a1df4e6dfc8a906..32030a5943d326a16b7c206b9498eb4ada6617cf 100644
GIT binary patch
literal 2068
zcmZvcOK;Oa6oscvoU|1Bpp+JnqO{#tT>wHtprWV>iy|Qb5(^fX#BL3K1lyr>$8Y0T
zu|eW|wx=GVj&w7==RW7mophED`^GGpzF9GkOue?uvJhj|Ot0F<XYbCAigJ4N_{lLI
z>!wpV;<KU1u688xqZGrcWKFUuKX4V$S4UZm`K=&NsO#?uAtucI^HCOOxxVosN7w+K
zdRdn~@{=I<KcrEZ<w;?LdKE5{ndRA6c8k&9k0`iwF?s+yy$Y%to6;v$PHOhemh^Fu
zB|({AwN>hz*jSfY9#6GX2aGzY+VNv@cxGGrd6Pq*LV9LL`&o2;Q94P92WR=omncZf
zDkm5@r%@Qri$GW%Pw&Mnn9O4zimq{PW0n<B8D$m!)*p_iQ65YhLr>=;w<jrPS$X<%
zmZcQcvbJ7h8)e04US?rf*;cAJ?s1Z(Md_#ItFjEzxnE`OX?DoFB8j6k@N?Hn?$yf9
z9e<zu(_CSb|6Sx$b8$;P-=Y+Hg>=oX_88tOy>Irkzwyf;kNnu7vWmyXa=8Rs<Pz*A
zF2Uh4NTQ-}xCDpG;v!0Qyh3BA-aPYAd(!lxPcxPmXB?ntp)<qiaQ<34Gt8>>c6JYI
zSUxQV-^{0t;~Z`rI&miw8wb|L)wwt;e!nDRosb^D=#Tsd5|-8XYqhFtXWrJey4$bC
z+PdBAcj3k@_G{mcjiWa(+Z*qQ-iV_&^tQM5?YO<zw*yvlSNo9@Y$$;%{5le_V+Z4&
z!A=~EGl0EyFy0B+dk5njU>_ZfHv#s^!I%-S&kn}igE9E<K!278-T*wfy2}Ie$s(S`
z`M}@}%<=$64zQub`gI!2@_?Vq1O3=o?t!_dAL6WT``K0nYV6C3o$velg0G=uSMl(K
zPK}{{;Rs*w=Zy|WVA$biNn-8jyeqIh+3z$q@(r5z17>k@Y)GdUW}h19@B%iF&fM7;
z{O>k4aQxAkKm2#3-_t&num+0czUXgJIOn3&v0d?E^VK!bx$C;8`oHd`eDwFA@#9|T
m51o4<_Nh2vhYuD!{t?0)zYt2!+Y&f@DJxu~{}rRpB>w=$k*ERy

delta 701
zcmZ8eF-{vn6#cWayJI<8;&{DskP#uVTp%J58kz{nqA^GmDS|{nV{8XTG3($ZqDf(M
z0<2G)B1)Yi7eL7okdg!B0!Z8-?~lEJSn18|fA7E9KW{Hf7f&PY)eVs%Lj`(1iN4Qm
zwlmw=P3?!l@HnH%)q3M>Fzk1UD5QYquxlWN+V0<T{^T}p9EcTSfYvhh9ea3mdUw>c
zxy)k~t1|!d;(6)ufb3JR^SR$1;uTJK`M0V%)d$nH!(Qjq4pOHYsJE(y6CzL6W$y*n
zZMRyl-jFkkz(<?P%$UWe3iiIt;%Y+)|MY4+Qd?ZnrTGM`d?!1ysZD!X=DGr^@`nD_
z@!geW$^h7!MIdz@7(L<;C6ydE^+{9@eNv0>7m%N&`C7+CnLrd$e52p!0M{IA3F_L9
zlRPMCSOUaaW))7A+}gZTUIy`octSut?{fvaj40gR1FkUR_H&L;f_N>DQo6f93x7VJ
zq&1866?o+|#LPeZ0bd5M`CWMa#JJ!hXc7MnSCa&eXQ-9{c@`<c9k$KN@|5){1}nkJ
aH{POKYWa1-En@D3znU6<F$?_1H2(t)h*zQj

diff --git a/Bin/UnitTest/Assets/UnitTest_FeatureDeveloping/Shader/AxesShader.vert b/Bin/UnitTest/Assets/UnitTest_FeatureDeveloping/Shader/AxesShader.vert
index 95130e3..953fd14 100644
--- a/Bin/UnitTest/Assets/UnitTest_FeatureDeveloping/Shader/AxesShader.vert
+++ b/Bin/UnitTest/Assets/UnitTest_FeatureDeveloping/Shader/AxesShader.vert
@@ -18,16 +18,19 @@ layout(location = 5) out vec4 fColor;
 //Uniform
 //layout(set = n, binding = m) for Opengl, we don't assign set. (default set is 0)
 //Uniform basic Buffer.
-layout(set = 0, binding = 0) uniform BasicUniforms {
+layout(set = 0, binding = 0) uniform CameraUniforms {
     mat4 proj;
 	mat4 view;
+	vec4 viewEye;
+} camera;
+
+layout(set = 1, binding = 0) uniform GeometryUniforms {
 	mat4 world;
 	mat4 normal;
-	vec4 viewEye;
-} basic;
+} geometry;
 
 //Uniform Light Buffer.
-layout(set = 1, binding = 0) uniform LightUniforms {
+layout(set = 2, binding = 0) uniform LightUniforms {
 	vec4 ambient;
 	vec4 diffuse;
 	vec4 specular;
@@ -41,18 +44,9 @@ layout(set = 1, binding = 0) uniform LightUniforms {
 	uint kind; //0: directional, 1: spot, 2: point
 } light;
 
-//Uniform Material buffer
-layout(set = 2, binding = 0) uniform MaterialUniforms {
-	vec4 ambient;
-	vec4 diffuse;
-	vec4 specular;
-	vec4 emission;
-	float shininess;
-} material;
-
 void main()
 {
 	vec4 vertex = vec4(vertices, 1.0);
 	fColor = colors;
-    gl_Position = basic.proj * basic.view * basic.world * vertex;
+    gl_Position = camera.proj * camera.view * geometry.world * vertex;
 }
\ No newline at end of file
diff --git a/Bin/UnitTest/Assets/UnitTest_FeatureDeveloping/Shader/AxesShader.vert.spv b/Bin/UnitTest/Assets/UnitTest_FeatureDeveloping/Shader/AxesShader.vert.spv
index bdea10dad53cb5b86334b896fd8ef3c71d88c47a..05c9cf270b4ebed09cc282a5cc174fce370899ca 100644
GIT binary patch
literal 3180
zcmZveTXPge6vsQ+-E1%dB63k-nGh5;8gBvd0)$$r@DQtFftC+e>99K+MrUW%nOQDA
z@fGwV`Kf%d%Kxu>&Spr_sgv&WKi58|&m^7YjlOeBuJ2aejtlFQTNdKnnp^Sv?%w^q
zt*RbxZD0EYjT5fp7125Aj{9?0zo&7U!@MebLv&VjQM4`kLUcp)rKqEyW$pjSLC<yd
zb7%{HO#I`dtdpn6d)^;>I!Y>uybb;*!y+rnz!Pf(D~+D=ep~!O_RD@!{@8eOLIW<5
zmlai7r$sKb@AbJ4Hbt7(_tQTU^h`#+k`1$T_HA0#aXv~GGOB@Wo@EPJPj}?*Eb>{`
zK8&YH8UK){lcJm|&lO3)S+lbEjomPEd7LIs+88;2-F=qGvg<a)kGxM}^xdZT-K3Z%
zb@}WtO7Mw{^`t1Xv3BBs5hqtVafXkc`$+sj<3mRwUEjZ;Q+XYFspbreq8!r@?C7nk
za**V8)1#j6^~2OG(OYp}NpCMbcvQC%Bo}a2JbjqThtCg;{Kn~IGOwt2u%`~yEE&zS
zSl#C?0jCc$YibMUeT~yH8ToFb-}mu)!mC+P-+ekOa)NrBAX{l<!=f6_>tZtTvQ=-V
zfzeybc?I>Ix=!+W+`OY8UzI#d^CT|YQsN%-_Pp;u=JB|c+2}<T>4aLmBAwsUoK^|x
zx^J{+)XnpKcT@X!ah;TDoV7~n?UAwCwFEm_OR$&K5}aBl)3mA>5G`s9PA#iPX|C&4
z*8AJSrcEw7x?O4U4H&>^!85P$)Eu69HU6GZ=9RS;HfI<)gRvV%&S2zd7-ul@+m!@=
z=-m^tuAN0}^o`%}=!+P=ea-6yJL0zO;IZ2gnJ=(IyWpSL=sg#a4>7^GJNRW0%Xs80
z^4$!_MO@?C`5JZ@H`tMj<%<q{J72@hj@-a3H|C$*up>8k%ME^8Jbg1c-vW5E=Q{x3
z5uwlb9-h8XFProBU2M+5LhXYdKEWc9+2R+BKSYM%8*HbAQ3J637RF42J!oOn0qmz1
z#{7c)+`^byuwPpkGYU2qQAh4!bzojEAK|Tz<jpLxuxA-YUBRplHltvX$n-iogIOJH
zHo<m8<YTt<ff*$q?2Na3PAhBjUY8U(=d(IduSj%G_S6ZUT1Wa#jldw})B-v7$k((l
ziNL>Zc)kf>o8r+uA#(2dZS+s;gf0Hihv%DN{?6!(t;yl}hJc-s{(0?@h=qUnH$})V
zh<{5vF~J5p@qNG-7&3@FE@&qva`J$`*kHurEk`2!5(oa0h;?3kq#eK1X`nu@YmXWN
zCkA~8^$s!MHyRB2mBslm##LcUqJiYhYqX%Q`%q{6fs->la|>p*XKt~lSJ$+2Z{)<g
zt{oXT`tZy(nAtPeZJxP?AL#!--aU6aO2jxyp-)};4e_xh20SxEP6K)3?Y_((`QB>u
z(7_g-_l@m!)tsIBv*_i&Liiq_%e!Tk@qJS~@AJ5bxB0!a$oFJ}X<J~-BYND~^iDMx
z@%H5rpRbFsM;|$F{FbsHCNg58cTU9nMaDaazoYo{{v8qTfp>*|r2SnHxaqv7GdfpA
zrt`ke;D5_cr2PXCcHm~Wr894%?fYZ#;AY1+1zT{-_fws@!(Z}E{-24^1IIV>`niZ%
P!8iAUNAEvX?S|-o%WnU5

literal 3064
zcmZveU2_yg6oxy=ZZ?R5fP82$&Kd<3jbDH$g5XMpi&zy4rMR$4C%dzub#`W*nFaKU
zzo5U!@>h9dmG9FtCmE*b)JgYw&-dv*ldLRn4xC$Z1GnaGx_X^(%R-zx>Q=+Py>oA8
ztE?tlm#=(;#xb`N6wx{EUJB=)e$Qf`!MrGXMRZ2=y66+p7134EXQCDTENlNq4*IUA
zpF>;tBjO(=MU^~3-VgrZ{WvKl3O4wkj`B1wYMxkQSZVZ?_qzD~^rzjVxZikkLTg;2
zAj?Z%`8*Rk2>R56P42Vmp8q33&t&8)*(mk%Z+uzB**H0n(G6saG(C{@RU@^t$Y-ei
z>$vpeA2L79iy4KiN&?QB7x^#jhLOu7pFD13<nTBz(n(8?*qQvr>7gzC#P-hbi6Zpe
zruaQ#Ylr7PYMWAgKirL)J<9W9LSA6pm8#rNva0EMKiu7(H_N)NYtq~C`wy#5UEr*E
zw&&#|)CERe6F;3UO8U3zz^JR7C*wsL>o%#Q#;I*?m(;?kZ{mw&9BvQ&LGaTTUe5FC
z&Xakb5j5D;veia5%FEHB%BRyHTMKp?0KJ`zTdi(aRgx{@=3UhCHOW(-C2`S~68A{3
z=e_>6h$n^2#?Puqryq1)kj}3@<LZR;+!xwY`WE<syRQA)xJn8ir>#~7dt|J3FTuLK
z1bbdD!Rci(^JU3{*P_SZ^s;>DGnH4`-QN&4YjV-iZA*)p-hk19Xa3;nIXv@c{9U2z
z;#o)Q%^60{VC;sGGZ;A<#u<$Kwk5$IdUu5kwX=wgzVVv@eHP<xUk-Y;9dX-s@YvlF
znJ=)e9kJVX@Yp>SnH^Zyjyl?Q@Yww=GCQzCySg6gMvq2O|4>K#(`)cIMJ(fyv*4L;
z?t(ht`S!w_J+lo@T;zO{;fYC3HoGBy3&S5+-OpMNpJ0*5Z1D@m9}B~*o?9)9zM!|;
z!kAOA?^_tX0ejHGm`Si7TNrZ)_Hzqk?!YD@`e@%9>ShM%qxA`XC}NQ}^TEQNWmvZl
z=ym%5wj#pT`T*AM1NoRO`7n3ngD>MPpHo7?hqA#h=QBFduSj%O_Vfv!7?FO{BQOX#
zy+DpVa+^c&>kZGGFNrRRNB5Y>xu;*De@Z88@rOP<-vRS?T4!uc4$pT1?6maHX^%uK
z{KLO0LVjNSYubqkwxQFyc6@;$gUI8&c48tY4|x98f)R(e9EtEt9QZdxtaIWc?f9in
z8#)cOM;$^=EV~bMhy}kXqW{R>IyfK3x+rW(WU((bI@V+66FGPCsdnl!f0r8>IQsC+
zFZyQB{I+@K7k)$ki}Ak6y-URCQhgsi_qk-m$CeoI%mNtw;f+4eAN7CP=%IrxJntCW
ztC}Hp`pn{f{uRR9qs#kbX7PPPJnxYICV7M3NsD}sH<-2qjPDP6)NFbu8jN_m@`%rq
zBJ9ye&Rf2zEQpDWnCP7q@lKKPp5bpRK6m@Ji2LUKpdV?!AObg?cXUSQqR4dK)fxOR
z`H8f@C&CWg?B3TIJKl%ceV{YA*=^~JEx6_Tq0ZFsr+kw?-xu`2@y%R*EMg|eo4Vl9
K`%hiFCi)*|<MB2C

diff --git a/Bin/UnitTest/Assets/UnitTest_FeatureDeveloping/Shader/PhongShader.frag b/Bin/UnitTest/Assets/UnitTest_FeatureDeveloping/Shader/PhongShader.frag
index f85676f..7490095 100644
--- a/Bin/UnitTest/Assets/UnitTest_FeatureDeveloping/Shader/PhongShader.frag
+++ b/Bin/UnitTest/Assets/UnitTest_FeatureDeveloping/Shader/PhongShader.frag
@@ -16,16 +16,19 @@ layout(location = 0) out vec4 fragColor;
 //Uniform
 //layout(set = n, binding = m) for Opengl, we don't assign set. (default set is 0)
 //Uniform basic Buffer.
-layout(set = 0, binding = 0) uniform BasicUniforms {
+layout(set = 0, binding = 0) uniform CameraUniforms {
     mat4 proj;
 	mat4 view;
+	vec4 viewEye;
+} camera;
+
+layout(set = 1, binding = 0) uniform GeometryUniforms {
 	mat4 world;
 	mat4 normal;
-	vec4 viewEye;
-} basic;
+} geometry;
 
 //Uniform Light Buffer.
-layout(set = 1, binding = 0) uniform LightUniforms {
+layout(set = 2, binding = 0) uniform LightUniforms {
 	vec4 ambient;
 	vec4 diffuse;
 	vec4 specular;
@@ -40,15 +43,15 @@ layout(set = 1, binding = 0) uniform LightUniforms {
 } light;
 
 //Uniform Material buffer
-layout(set = 2, binding = 0) uniform MaterialUniforms {
+layout(set = 3, binding = 0) uniform MaterialUniforms {
 	vec4 ambient;
 	vec4 diffuse;
 	vec4 specular;
-    vec4 emission;
+	vec4 emission;
 	float shininess;
 } material;
 
-layout(set = 2, binding = 1) uniform sampler2D mainTexture; 
+layout(set = 3, binding = 1) uniform sampler2D mainTexture; 
 
 //------- light vertices basic function -------
 float calculateAttenation(in float dis)
diff --git a/Bin/UnitTest/Assets/UnitTest_FeatureDeveloping/Shader/PhongShader.frag.spv b/Bin/UnitTest/Assets/UnitTest_FeatureDeveloping/Shader/PhongShader.frag.spv
index 7df377ae4bbb1c00f73176c4c8abba9f48244259..d04a34bbb8b289dc1591e2c054539c8ca2628ee0 100644
GIT binary patch
delta 404
zcmZ4Dy26c@nMs+Qfq{{Moq>bFVIyxm8=rGxZfa3tXkKPoeo=1m<SI6^`m)T_a@WdK
z237_Z1{+2OhGei31|XlE!4}AOPtDIwEh(ymX<`5ZHlQp>4g|{ci*izcG)xR6oCh>L
zF$ZJ@D}y~yARTH3NWBM8Oc}%g0w6v4KigAArpZs)_cJn2Udo{lB(HKT6<}qs0_tOe
zs9|VenEZ=VPtybFM3}X#Kq-(>Fh0yku-IfnPT^3H49GFaDnWdZN(Uf@=>~}bgNZ=^
zh}{{O!6t$%b_d!9a=a3d4N?Q<Z<gh{$jl6M-Q=IV`kHc32U!B;L0AFEw*%53?I7!|
Mp?v$zihRu?0I>-=N&o-=

delta 285
zcmZ4Cw#1c}nMs+Qfq{{Moq>bFb|Y^*8=q5Rab|L8US?W;QEoBA<SI5Z+w%OPoD>EI
z1~vv(1}jDe24)~T4=A0OgAii@ij`%imb+G_0#&gv*Z|cffsC3g%l@5_ak41KenzIr
zS2^^7BrE6AdKR!rOh8?%K<oiE8N^ox;s!J^pc@$kz+w=6AQvF(1Mxxn4gfLCERYyN
pAH?M#SAx_r09~|;Q*Uz%*D+>pcCb?{feyBu?8~RWc@1BU2mk{rC=37q

diff --git a/Bin/UnitTest/Assets/UnitTest_FeatureDeveloping/Shader/PhongShader.vert b/Bin/UnitTest/Assets/UnitTest_FeatureDeveloping/Shader/PhongShader.vert
index 31d71ef..ecba089 100644
--- a/Bin/UnitTest/Assets/UnitTest_FeatureDeveloping/Shader/PhongShader.vert
+++ b/Bin/UnitTest/Assets/UnitTest_FeatureDeveloping/Shader/PhongShader.vert
@@ -23,16 +23,19 @@ layout(location = 4) out vec3 wViewDir;
 //Uniform
 //layout(set = n, binding = m) for Opengl, we don't assign set. (default set is 0)
 //Uniform basic Buffer.
-layout(set = 0, binding = 0) uniform BasicUniforms {
+layout(set = 0, binding = 0) uniform CameraUniforms {
     mat4 proj;
 	mat4 view;
+	vec4 viewEye;
+} camera;
+
+layout(set = 1, binding = 0) uniform GeometryUniforms {
 	mat4 world;
 	mat4 normal;
-	vec4 viewEye;
-} basic;
+} geometry;
 
 //Uniform Light Buffer.
-layout(set = 1, binding = 0) uniform LightUniforms {
+layout(set = 2, binding = 0) uniform LightUniforms {
 	vec4 ambient;
 	vec4 diffuse;
 	vec4 specular;
@@ -47,7 +50,7 @@ layout(set = 1, binding = 0) uniform LightUniforms {
 } light;
 
 //Uniform Material buffer
-layout(set = 2, binding = 0) uniform MaterialUniforms {
+layout(set = 3, binding = 0) uniform MaterialUniforms {
 	vec4 ambient;
 	vec4 diffuse;
 	vec4 specular;
@@ -55,7 +58,7 @@ layout(set = 2, binding = 0) uniform MaterialUniforms {
 	float shininess;
 } material;
 
-layout(set = 2, binding = 1) uniform sampler2D mainTexture; 
+layout(set = 3, binding = 1) uniform sampler2D mainTexture; 
 
 //------- light vertices basic function -------
 vec3 CalculateLightDir(in vec4 iVertex)
@@ -77,16 +80,16 @@ vec3 CalculateLightDir(in vec4 iVertex)
 
 vec3 CalculateViewDir(in vec4 iVertex)
 {
-	return normalize(basic.viewEye.xyz - iVertex.xyz);
+	return normalize(camera.viewEye.xyz - iVertex.xyz);
 }
 
 void main()
 {
 	vec4 vertex = vec4(vertices, 1.0);
-	wNormal = normalize((basic.normal * vec4(normals, 0.0)).xyz);
+	wNormal = normalize((geometry.normal * vec4(normals, 0.0)).xyz);
 	texCoord = texCoords;
 	wLightDir = CalculateLightDir(vertex).xyz;
 	wViewDir = CalculateViewDir(vertex).xyz;
 	wVertex = vertex;
-    gl_Position = basic.proj * basic.view * basic.world * vertex;
+    gl_Position = camera.proj * camera.view * geometry.world * vertex;
 }
\ No newline at end of file
diff --git a/Bin/UnitTest/Assets/UnitTest_FeatureDeveloping/Shader/PhongShader.vert.spv b/Bin/UnitTest/Assets/UnitTest_FeatureDeveloping/Shader/PhongShader.vert.spv
index 6246c78a4ec4728534a14db2bfb6d167c31e2634..da0d1a127bee96ee8ac483146de28c8d42884b57 100644
GIT binary patch
literal 5352
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
DN7C89

literal 5220
zcmZvf33C)x5XUFSE&;-&++f%wmVzi=oFWhiF<1r&a+C)Oo83tm*^Aj(5)d^KLGcFf
z>kIfPEWeaTm6reC%<JT_<)b>?{qN)T>-TyRx;h6J1wlu!DCh}(39_{+=oAtJOM`sM
zN5@W&?Pw<D9XoeDg~#%sD|N(YMX)lJyY;hLjA|&ai%Oy?QB%|sO^e<Z&5CY`z7~BW
z>e9bX@!yp!7j*02LY|yz>XklRtdv@nViJx;Q<svXQM~o)<j(z>|5Dkbb77o>Gm7s~
zJ)Zx$D4bq!PxCLo&p#hLAU#ccwiZp+<0|#$<q6IzRwtscmds<Exg1SSwwj@^ES~zC
zjgT5+VhpECje0XmqI%jF!#QI)io=pK<kfxl%ZZwedNMN8sMpw3%WQdP8?HBpTS<L#
zGPU)jak{{uRIfFYVl6qGBw?*pOf%=z5AybiDp4&g#=e!@i&Ohz*{`&U<yc{*`(5Od
z^<s&9E=RSpSlY+c;uWqV)$_q|@gv1%RBG!ZII9uY--445j6Pn~_4pWloUX?eHZebX
zSkt`}D+?I?BX;CknAUPq`UHE6^M+o<o;?Zax%54vN2QSKO?~j4K9MCRhPRsS(@bM<
z)SDWv*JF3)T>6d;!%l7vFm3NL#kzwT@kTK&R-F&;e%if7iRu0~#20+JgIVd*^Y1tx
z%t@cBTo?~y2TJGtfU~gK)8dVQ)6*1>YRT#7dWfId=&fwSm8fwv;-!>$zgb+Dv$ZOf
zd0S3%$(*t{C-bVPDLqTq!(2MQ6OnZdzeT~f@;k0kjiX}4dkWesm)gkZ&lLXcGX?g4
zGX+kqVKr(ty_o{%O*Ah>H9hmD-OcyHs;(A^={bH*v8Z+?oJm@77#tI7vp$HEmSNNd
z#uv^o>H;fx7&U?MaWp^b0UPo#<{NC>!<cKZGakk~gT3Nm%rMw_4`Xh@E_xVq3dW-y
zRkt`BHIJ%8%<O=ObD7>RnRQHdn^o%M9Hx_x<zv*C^(BiVryqw-+>prPz}n-e&5uJT
zZdPP*VC`{T!u&XN;(ilZ9N0o!b{@MInm~UzBl+nE-;n_k%k=(CO?7^+^?7>9=@vib
zbk0dU@6h+>_aM6Y^X)*VPW<^!pi?9ItkcQIndZb<{LW(;h8@iJV-GNLn;$Y*mcJ{_
zXSFcjel7fNwpxg1##n<HOLKy;Cz#C$7&*ZTB8z2jFq;vZS+F4ycVV%do!K1_S$*jJ
zA{KV$*ter&r=ABDMO?pfvM=&lNz7V7v`+E73v_x>&`;(I48qQAVJE&{I&%ev-x}$w
z#0w%;U$88lGmG~*Ioc_U?N*&xZOrI?<wR#jsh2(0h!;d1qU}y!E16oTd7U`E<iif%
zC}ORaWs|tYZIR4bh%1N_N1Yb8O|tDnp1mS`EPg~Xy;`rIW8%c3_eo-gz<k2aUMIxK
zgAZp!XU@Q|zb4MU^cFihb7r;ByEjBZFnb992}zv8{LxDe!(Nt5Zfdc7Q<D9Bk#rXK
zd_|l+te#jh`N4@tXO69RiDYt_9i6!b!=HMXYy3@Tt}XsOC(|G7=(7&nEd8cr>ft{6
zB+ZHA3x*BioF9mj6FYg(Z#m5F?6!24>31YsA9!1zi8@8Z(|5iBb`EsD0qEQ@vq>F3
zQ4_U%Cr%!G$c4_lf^E=E{UDAnx%_4NCY|I*8So?DPtFO9eCW(KYq!2d<n2zitOtJz
z;dcSP%qM^US%1-I+VmSvKOleJ(RmSX?v%1n=bH`_o5wCVjGE2wqQj_XTsyL7QA9lc
z7e&0?gE}8IVLPln%HpAjIoKki4&Lje2;AzrBza0?`|$@f7|XEBlEM7CDh~7OstO|>
zf9%Y_UDZO({O5$d@j0mu(v!Lf9Ac55e7))r_J+eo#PQ{fC5KZ#^Kn(gY+z%C(6O=S
zH4#0*#{Ho0Q$6IqF6tG5V`rYgEcPAA7Rz0tTkN}%SBSugW%j@<_I=3~J1ZI8?&L$s
z+{tYb{@lq&B5?EhSTa6$MCS8}Wbk{cpO{ZY#DQDf=aPwI<}B_D$>0|ErDS5kt=_wm
zsn_o6o@D&M$<6oUE72_xb#rEP{Ql9c?G-UI^tD&SS|ZvbzaH_WBIakAIQiCzuNU!q
zXsw7kR*7#Af&VI>P2!s!wo&{K<?0h>{VjiN4~ZTTksF!Z1@V3nx$WKa76u${Z*S0H
z;H(aj|Mnhs7;g{Xe`N(@FZQ%^JSw^U99xBf+c_SS47N?gIUW~haSm+TMY}}gMz(W2
zA-Vk=JA{GTIi8dZ2C?iMcDMX3ME}kIX~|#^%lzlu{XHX$ocP%sKI{DG1$KG?M!nQ+
zz1S_ey%&3gfm<*3Ne0_1q8IzcS@Z(ibE2anawA(Wo|oL-ivz;I?Q91ngF!4ioAu(5
zFuxZ=(!n5>`CBgz3nS-{$a--^GJf;|JG}s-Uh1}bUyw|__}TuWlEJOsW0JujmhEqQ
zz34D<;LBcM>_y-H66Y<U!_k=$ba;pQ%S^r`A{Oq?>I&&Be^!@ECw`^4on>6|Ns)h+
yQ_?d$`<A~f9SmaGS?uhmg^}CNenv7F#4>;D{aIn;#LxP1&iPRXcFqLGnf?QP%*DC@

diff --git a/PropSheet/SDEngine.props b/PropSheet/SDEngine.props
index 8ca3304..6b7c0fa 100644
--- a/PropSheet/SDEngine.props
+++ b/PropSheet/SDEngine.props
@@ -2,7 +2,7 @@
 <Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
   <ImportGroup Label="PropertySheets" />
   <PropertyGroup Label="UserMacros">
-    <SDEngineRootDir>D:\Project\SDEngine\</SDEngineRootDir>
+    <SDEngineRootDir>$(SolutionDir)\</SDEngineRootDir>
     <SDLibraryDirs>$(SDEngineRootDir)Bin\Library\Windows\$(Platform)\$(Configuration);</SDLibraryDirs>
     <GLMIncludeDirs>$(SDEngineRootDir)\ThirdParty\GLM</GLMIncludeDirs>
     <SDLibrary>SDEngine.lib;</SDLibrary>
diff --git a/SourceCode/include/Graphics/Material/BasicParameter.h b/SourceCode/include/Graphics/Material/BasicParameter.h
index 13f1af6..4e92b41 100644
--- a/SourceCode/include/Graphics/Material/BasicParameter.h
+++ b/SourceCode/include/Graphics/Material/BasicParameter.h
@@ -23,8 +23,8 @@ SOFTWARE.
 
 */
 
-/*! \file      BasicParameter.h
- *  \brief     Introduce of class BasicParameter.
+/*! \file      CameraParameter.h
+ *  \brief     Introduce of class CameraParameter.
  *  \author    Kuan-Chih, Chen
  *  \date      2019/10/12
  *  \copyright MIT License.
@@ -45,21 +45,21 @@ using SDE::Math::Vector3f;
 
 _____________SD_START_GRAPHICS_NAMESPACE_____________
 
-/*! \class BasicParameter
- *    In our system, we use class BasicParameter to keeping uniform variables.
+/*! \class CameraParameter
+ *    In our system, we use class CameraParameter to keeping uniform variables.
  */
-class SDENGINE_CLASS BasicParameter
+class SDENGINE_CLASS CameraParameter
 {
 public:
-    /* \fn BasicParameter();
-     * \brief Ctor of BasicParameter.
+    /* \fn CameraParameter();
+     * \brief Ctor of CameraParameter.
      */
-    BasicParameter();
+    CameraParameter();
 
-    /* \fn ~BasicParameter();
-     * \brief Dtor of BasicParameter.
+    /* \fn ~CameraParameter();
+     * \brief Dtor of CameraParameter.
      */
-    ~BasicParameter();
+    ~CameraParameter();
 public:
     /* \var Matrix4X4f m_proj;
      * \brief Convert vertices in view space to projection space(-1,1,-1,1,-1,1). 
@@ -71,8 +71,27 @@ public:
      */
     Matrix4X4f m_view;
 
+    /* \var Vector3f m_view_eye;
+     * \brief camera position in world space.
+     */
+    Vector3f m_view_eye;
+};
+
+class SDENGINE_CLASS GeometryParameter
+{
+public:
+    /* \fn GeometryParameter();
+     * \brief Ctor of GeometryParameter.
+     */
+    GeometryParameter();
+
+    /* \fn ~GeometryParameter();
+     * \brief Dtor of GeometryParameter.
+     */
+    ~GeometryParameter();
+public:
     /* \var Matrix4X4f m_worid;
-     * \brief Convert vertices in object space to view space.
+     * \brief Convert vertices in object space to world space.
      */
     Matrix4X4f m_worid;
 
@@ -80,11 +99,6 @@ public:
      * \brief Convert normals in object space to world space.
      */
     Matrix4X4f m_normal;
-
-    /* \var Vector3f m_view_eye;
-     * \brief camera position in world space.
-     */
-    Vector3f m_view_eye;
 };
 
 ______________SD_END_GRAPHICS_NAMESPACE______________
diff --git a/SourceCode/src/Graphics/Material/BasicParameter.cpp b/SourceCode/src/Graphics/Material/BasicParameter.cpp
index debc21f..f559438 100644
--- a/SourceCode/src/Graphics/Material/BasicParameter.cpp
+++ b/SourceCode/src/Graphics/Material/BasicParameter.cpp
@@ -27,12 +27,21 @@ SOFTWARE.
 
 _____________SD_START_GRAPHICS_NAMESPACE_____________
 
-BasicParameter::BasicParameter()
+CameraParameter::CameraParameter()
 {
 }
 
-BasicParameter::~BasicParameter()
+CameraParameter::~CameraParameter()
 {
 }
 
+GeometryParameter::GeometryParameter()
+{
+}
+
+GeometryParameter::~GeometryParameter()
+{
+}
+
+
 ______________SD_END_GRAPHICS_NAMESPACE______________
\ No newline at end of file
diff --git a/UnitTest/Common/UnitTest_FeatureDeveloping/Code/SampleDrawObjects.cpp b/UnitTest/Common/UnitTest_FeatureDeveloping/Code/SampleDrawObjects.cpp
index 5d4ed48..f5bd6f0 100644
--- a/UnitTest/Common/UnitTest_FeatureDeveloping/Code/SampleDrawObjects.cpp
+++ b/UnitTest/Common/UnitTest_FeatureDeveloping/Code/SampleDrawObjects.cpp
@@ -69,6 +69,45 @@ SampleCameraData::~SampleCameraData()
 {
 }
 
+void SampleCameraData::InitializeUniformSet(const DescriptorSetLayoutWeakReferenceObject &i_dsl_wref)
+{
+    std::map<ObjectName, UniformVariableWeakReferenceObject> uv_wrefs;
+    uint32_t desc_counts[UniformBindingType_MAX_DEFINE_VALUE] = { 0 };
+    i_dsl_wref.GetRef().GetUniformDescriptorCounts(desc_counts);
+
+    //Visit all descriptor set layout to allocated set and get weak reference uniform variables.
+    m_camera_pool_sref = new DescriptorPool("CommonPool");
+    m_camera_pool_sref.GetRef().Initialize(desc_counts, 1, false);
+    m_camera_set_wref = m_camera_pool_sref.GetRef().AllocateDescriptorSet(i_dsl_wref);
+    m_camera_set_wref.GetRef().LinkUniformVariables(uv_wrefs);
+
+    //Write descriptor.
+    if (m_camera_set_wref.IsNull() == false) {
+        m_camera_set_wref.GetRef().WriteDescriptor();
+    }
+
+    if (uv_wrefs.find("camera") != uv_wrefs.end()) {
+        m_camera_wref = uv_wrefs["camera"].DynamicCastTo<UniformBuffer>();
+    }
+
+    if (m_camera_wref.IsNull() == true) {
+        SDLOGE("We can find basic uniform buffer.");
+    }
+}
+
+void SampleCameraData::UpdateUniformSet()
+{
+    CameraParameter ub = {};
+    ub.m_proj = m_proj_mat;
+    ub.m_view = m_trans.MakeViewMatrix();
+    ub.m_view_eye = m_trans.m_position;
+
+    if (m_camera_wref.IsNull() == false) {
+        m_camera_wref.GetRef().SetBufferData(&ub, sizeof(CameraParameter));
+        m_camera_wref.GetRef().Update();
+    }
+}
+
 ObjectData::ObjectData()
 {
 }
@@ -95,8 +134,8 @@ void ObjectData::InitializeBasicUniformSet(const DescriptorSetLayoutWeakReferenc
         m_basic_set_wref.GetRef().WriteDescriptor();
     }
 
-    if (uv_wrefs.find("basic") != uv_wrefs.end()) {
-        m_basic_wrefs = uv_wrefs["basic"].DynamicCastTo<UniformBuffer>();
+    if (uv_wrefs.find("geometry") != uv_wrefs.end()) {
+        m_basic_wrefs = uv_wrefs["geometry"].DynamicCastTo<UniformBuffer>();
     }
 
     if (m_basic_wrefs.IsNull() == true) {
@@ -107,16 +146,12 @@ void ObjectData::InitializeBasicUniformSet(const DescriptorSetLayoutWeakReferenc
 void ObjectData::UpdateCommonUniformSet(
     const SampleCameraData &i_camera)
 {
-    BasicParameter ub = {};
-    ub.m_proj = i_camera.m_proj_mat;
-    ub.m_view = i_camera.m_trans.MakeViewMatrix();
-    ub.m_view_eye = i_camera.m_trans.m_position;
+    GeometryParameter ub = {};
     ub.m_worid = m_trans.MakeWorldMatrix();
-
-
+    ub.m_normal = m_trans.MakeNormalMatrix();
 
     if (m_basic_wrefs.IsNull() == false) {
-        m_basic_wrefs.GetRef().SetBufferData(&ub, sizeof(BasicParameter));
+        m_basic_wrefs.GetRef().SetBufferData(&ub, sizeof(GeometryParameter));
         m_basic_wrefs.GetRef().Update();
     }
 }
@@ -124,10 +159,12 @@ void ObjectData::UpdateCommonUniformSet(
 void ObjectData::Draw(
     const RenderPassWeakReferenceObject &i_rp_wref,
     const CommandBufferWeakReferenceObject &i_cb_wref,
+    const SampleCameraData &i_camera,
     const LightData &i_light_data,
     uint32_t i_sp_id)
 {
     std::vector<DescriptorSetWeakReferenceObject> common_set_wrefs = {
+        i_camera.m_camera_set_wref,
         m_basic_set_wref,
         i_light_data.m_light_set_wref
     };
@@ -250,7 +287,8 @@ void SampleDrawObjects::Destroy()
     m_phong_shader_sref.Reset();
     m_axes_shader_sref.Reset();
 
-    m_basic_dsl_sref.Reset();
+    m_camera_dsl_sref.Reset();
+    m_geometry_dsl_sref.Reset();
     m_light_dsl_sref.Reset();
 
     for (DescriptorSetLayoutStrongReferenceObject &gen_sref : m_general_dsl_srefs) {
@@ -377,17 +415,25 @@ void SampleDrawObjects::CreateCommandBufferAndPool()
 void SampleDrawObjects::CreateCommonUniformVariablesAndLayouts()
 {
     //1. new common descriptor set and its uniform variable descriptors.
-    UniformBufferDescriptorStrongReferenceObject basic_ubd_sref = new UniformBufferDescriptor("basic", 0);
-    basic_ubd_sref.GetRef().AddVariable("proj", UniformBufferVariableType_MATRIX4X4F, offsetof(BasicParameter, m_proj));
-    basic_ubd_sref.GetRef().AddVariable("view", UniformBufferVariableType_MATRIX4X4F, offsetof(BasicParameter, m_view));
-    basic_ubd_sref.GetRef().AddVariable("world", UniformBufferVariableType_MATRIX4X4F, offsetof(BasicParameter, m_worid));
-    basic_ubd_sref.GetRef().AddVariable("normal", UniformBufferVariableType_MATRIX4X4F, offsetof(BasicParameter, m_normal));
-    basic_ubd_sref.GetRef().AddVariable("viewEye", UniformBufferVariableType_VECTOR3F, offsetof(BasicParameter, m_view_eye));
-    basic_ubd_sref.GetRef().AddVariableDone();
-
-    m_basic_dsl_sref = new DescriptorSetLayout("RenderDescriptorSetLayout");
-    m_basic_dsl_sref.GetRef().AddUniformVariableDescriptors({ basic_ubd_sref.StaticCastTo<UniformVariableDescriptor>()});
-    m_basic_dsl_sref.GetRef().Initialize();
+    UniformBufferDescriptorStrongReferenceObject camera_ubd_sref = new UniformBufferDescriptor("camera", 0);
+    camera_ubd_sref.GetRef().AddVariable("proj", UniformBufferVariableType_MATRIX4X4F, offsetof(CameraParameter, m_proj));
+    camera_ubd_sref.GetRef().AddVariable("view", UniformBufferVariableType_MATRIX4X4F, offsetof(CameraParameter, m_view));
+    camera_ubd_sref.GetRef().AddVariable("viewEye", UniformBufferVariableType_VECTOR3F, offsetof(CameraParameter, m_view_eye));
+    camera_ubd_sref.GetRef().AddVariableDone();
+
+    m_camera_dsl_sref = new DescriptorSetLayout("RenderDescriptorSetLayout");
+    m_camera_dsl_sref.GetRef().AddUniformVariableDescriptors({ camera_ubd_sref.StaticCastTo<UniformVariableDescriptor>() });
+    m_camera_dsl_sref.GetRef().Initialize();
+
+
+    UniformBufferDescriptorStrongReferenceObject geometry_ubd_sref = new UniformBufferDescriptor("geometry", 0);
+    geometry_ubd_sref.GetRef().AddVariable("world", UniformBufferVariableType_MATRIX4X4F, offsetof(GeometryParameter, m_worid));
+    geometry_ubd_sref.GetRef().AddVariable("normal", UniformBufferVariableType_MATRIX4X4F, offsetof(GeometryParameter, m_normal));
+    geometry_ubd_sref.GetRef().AddVariableDone();
+
+    m_geometry_dsl_sref = new DescriptorSetLayout("RenderDescriptorSetLayout");
+    m_geometry_dsl_sref.GetRef().AddUniformVariableDescriptors({ geometry_ubd_sref.StaticCastTo<UniformVariableDescriptor>()});
+    m_geometry_dsl_sref.GetRef().Initialize();
 
     //
     UniformBufferDescriptorStrongReferenceObject light_ubd_sref = new UniformBufferDescriptor("light", 0);
@@ -465,10 +511,12 @@ void SampleDrawObjects::CreateShaderProgram()
         //1.3 prepare descriptor set layouts.
         std::vector<DescriptorSetLayoutWeakReferenceObject> dsl_wrefs;
         std::vector<DescriptorSetLayoutWeakReferenceObject> common_dsl_wrefs;
-        common_dsl_wrefs.push_back(m_basic_dsl_sref);
+        common_dsl_wrefs.push_back(m_camera_dsl_sref);
+        common_dsl_wrefs.push_back(m_geometry_dsl_sref);
         common_dsl_wrefs.push_back(m_light_dsl_sref);
         //prepare all descriptor set wref.
-        dsl_wrefs.push_back(m_basic_dsl_sref);
+        dsl_wrefs.push_back(m_camera_dsl_sref);
+        dsl_wrefs.push_back(m_geometry_dsl_sref);
         dsl_wrefs.push_back(m_light_dsl_sref);
         for (uint32_t layout_count = 0; layout_count < m_general_dsl_srefs.size(); ++layout_count) {
             dsl_wrefs.push_back(m_general_dsl_srefs[layout_count]);
@@ -520,15 +568,16 @@ void SampleDrawObjects::CreateShaderProgram()
         //1.3 prepare descriptor set layouts.
         std::vector<DescriptorSetLayoutWeakReferenceObject> dsl_wrefs;
         std::vector<DescriptorSetLayoutWeakReferenceObject> common_dsl_wrefs;
-        common_dsl_wrefs.push_back(m_basic_dsl_sref);
+        common_dsl_wrefs.push_back(m_camera_dsl_sref);
+        common_dsl_wrefs.push_back(m_geometry_dsl_sref);
         common_dsl_wrefs.push_back(m_light_dsl_sref);
-
         //prepare all descriptor set wref.
-        dsl_wrefs.push_back(m_basic_dsl_sref);
+        dsl_wrefs.push_back(m_camera_dsl_sref);
+        dsl_wrefs.push_back(m_geometry_dsl_sref);
         dsl_wrefs.push_back(m_light_dsl_sref);
-        for (uint32_t layout_count = 0; layout_count < m_general_dsl_srefs.size(); ++layout_count) {
-            dsl_wrefs.push_back(m_general_dsl_srefs[layout_count]);
-        }
+        //for (uint32_t layout_count = 0; layout_count < m_general_dsl_srefs.size(); ++layout_count) {
+        //    dsl_wrefs.push_back(m_general_dsl_srefs[layout_count]);
+        //}
 
         //2.3 register uniform variable descriptor to pipeline.
         GraphicsPipelineStrongReferenceObject pipeline_sref = new GraphicsPipeline("AxesShader_Forward");
@@ -548,7 +597,7 @@ void SampleDrawObjects::CreateShaderProgram()
         forward_rp.m_sp_pipe_infos.push_back(rsp_info); //use pipeline 0 at sp0.
         rp_infos.push_back(forward_rp);
         m_axes_shader_sref.GetRef().RegisterShaderProgramStructure(
-            rp_infos, pipe_srefs, common_dsl_wrefs, m_general_dsl_srefs);
+            rp_infos, pipe_srefs, common_dsl_wrefs, {}/*m_general_dsl_srefs*/);
     }
 }
 
@@ -568,8 +617,8 @@ void SampleDrawObjects::CreateSharedMaterial()
     {
         m_axes_shared_material_sref = new Material("AxesMaterial");
         m_axes_shared_material_sref.GetRef().BindShaderProgram(m_axes_shader_sref);
-        MaterialParameter mat_ub; //use default color.
-        m_axes_shared_material_sref.GetRef().SetDataToUniformBuffer("material", &mat_ub, sizeof(MaterialParameter));
+        //MaterialParameter mat_ub; //use default color.
+        //m_axes_shared_material_sref.GetRef().SetDataToUniformBuffer("material", &mat_ub, sizeof(MaterialParameter));
         //Set data done. Link with shader program.(Write descirptor)
         m_axes_shared_material_sref.GetRef().LinkWithShaderProgram();
         m_axes_shared_material_sref.GetRef().Update();
@@ -586,7 +635,7 @@ void SampleDrawObjects::CreateObjects()
     m_scene_objects.push_back(ObjectData());
     last_obj_iter = m_scene_objects.rbegin();
     (*last_obj_iter).m_mesh = m_floor_sref;
-    (*last_obj_iter).InitializeBasicUniformSet(m_basic_dsl_sref);
+    (*last_obj_iter).InitializeBasicUniformSet(m_geometry_dsl_sref);
     (*last_obj_iter).UpdateCommonUniformSet(m_camera);
     (*last_obj_iter).m_shared_mat_wref = m_shared_material_sref;
 
@@ -596,7 +645,7 @@ void SampleDrawObjects::CreateObjects()
     last_obj_iter = m_scene_objects.rbegin();
     (*last_obj_iter).m_trans.m_position = Vector3f(0.0f, 0.0001f, 0.0f);
     (*last_obj_iter).m_mesh = m_axes_sref;
-    (*last_obj_iter).InitializeBasicUniformSet(m_basic_dsl_sref);
+    (*last_obj_iter).InitializeBasicUniformSet(m_geometry_dsl_sref);
     (*last_obj_iter).UpdateCommonUniformSet(m_camera);
     (*last_obj_iter).m_shared_mat_wref = m_axes_shared_material_sref;
 
@@ -615,7 +664,7 @@ void SampleDrawObjects::CreateObjects()
                 (*last_obj_iter).m_trans.m_position = start_pos + 
                     Vector3f((m_cube_side_length + m_cube_interval) * row, (m_cube_side_length + m_cube_interval) * col, (m_cube_side_length + m_cube_interval) * depth);
                 //
-                (*last_obj_iter).InitializeBasicUniformSet(m_basic_dsl_sref);
+                (*last_obj_iter).InitializeBasicUniformSet(m_geometry_dsl_sref);
                 (*last_obj_iter).UpdateCommonUniformSet(m_camera);
                 (*last_obj_iter).m_shared_mat_wref = m_shared_material_sref;
             }
@@ -646,6 +695,9 @@ void SampleDrawObjects::CreateCamera()
     float ratio = m_current_res.GetRatio();
     m_camera.m_proj_mat.perspective(120, m_current_res.GetRatio(), 0.01f, 1000.0f);
 
+    m_camera.InitializeUniformSet(m_camera_dsl_sref);
+    m_camera.UpdateUniformSet();
+
     SDLOG("%s", m_camera.m_trans.MakeWorldMatrix().ToFormatString("Camera", "").c_str());
 }
 
@@ -656,6 +708,7 @@ void SampleDrawObjects::InitializeCameraPosition()
         Vector3f(0.0f, 1.5f, 0.0f, 1.0f),
         Vector3f::PositiveY,
         true);
+    m_camera.UpdateUniformSet();
 }
 
 void SampleDrawObjects::CreateLight()
@@ -728,7 +781,7 @@ void SampleDrawObjects::RecordCommandBuffer()
         ObjectData* obj_ref = &(*obj_iter);
 
         std::function<void(const CommandBufferWeakReferenceObject&)> task_func = [this, obj_ref](const CommandBufferWeakReferenceObject &i_cb_wref) {
-            obj_ref->Draw(m_forward_rp_sref, i_cb_wref, m_light, 0);
+            obj_ref->Draw(m_forward_rp_sref, i_cb_wref, m_camera, m_light, 0);
         };
 
         m_rec_threads[tID].GetRef().AddTask(task_func);
@@ -832,4 +885,6 @@ void SampleDrawObjects::UpdateCamera()
         Vector3f offset = m_camera.m_trans.GetTop().negative().scale(static_cast<float>(Timer::GetRef().GetProgramDeltaTime()) * 2.0f);//speed 2m/s
         m_camera.m_trans.AddTranslation(offset);
     }
+
+    m_camera.UpdateUniformSet();
 }
\ No newline at end of file
diff --git a/UnitTest/Common/UnitTest_FeatureDeveloping/Code/SampleDrawObjects.h b/UnitTest/Common/UnitTest_FeatureDeveloping/Code/SampleDrawObjects.h
index 4e8786d..e8de5d0 100644
--- a/UnitTest/Common/UnitTest_FeatureDeveloping/Code/SampleDrawObjects.h
+++ b/UnitTest/Common/UnitTest_FeatureDeveloping/Code/SampleDrawObjects.h
@@ -36,8 +36,15 @@ public:
     SampleCameraData();
     ~SampleCameraData();
 public:
+    void InitializeUniformSet(const DescriptorSetLayoutWeakReferenceObject &i_dsl_wref);
+    void UpdateUniformSet();
+public:
     RenderFlowStrongReferenceObject m_forward_rf;
 public:
+    UniformBufferWeakReferenceObject m_camera_wref;
+    DescriptorPoolStrongReferenceObject m_camera_pool_sref;
+    DescriptorSetWeakReferenceObject m_camera_set_wref;
+public:
     TextureStrongReferenceObject m_color_buffer;
     TextureStrongReferenceObject m_depth_buffer;
 public:
@@ -53,7 +60,7 @@ public:
 public:
     void InitializeBasicUniformSet(const DescriptorSetLayoutWeakReferenceObject &i_basic_dsl_wref);
     void UpdateCommonUniformSet(const SampleCameraData &i_camera);
-    void Draw(const RenderPassWeakReferenceObject &i_rp_wref, const CommandBufferWeakReferenceObject &i_cb_wref, const LightData &i_light_data, uint32_t i_sp_id);
+    void Draw(const RenderPassWeakReferenceObject &i_rp_wref, const CommandBufferWeakReferenceObject &i_cb_wref, const SampleCameraData &i_camera,const LightData &i_light_data, uint32_t i_sp_id);
 public:
     UniformBufferWeakReferenceObject m_basic_wrefs;
     DescriptorPoolStrongReferenceObject m_basic_pool_sref;
@@ -95,7 +102,8 @@ private:
     void CreateObjects();
     void UpdateCamera();
 protected:
-    DescriptorSetLayoutStrongReferenceObject m_basic_dsl_sref;
+    DescriptorSetLayoutStrongReferenceObject m_camera_dsl_sref;
+    DescriptorSetLayoutStrongReferenceObject m_geometry_dsl_sref;
     DescriptorSetLayoutStrongReferenceObject m_light_dsl_sref;
 protected:
     std::vector<DescriptorSetLayoutStrongReferenceObject> m_general_dsl_srefs;
-- 
2.8.1.windows.1

